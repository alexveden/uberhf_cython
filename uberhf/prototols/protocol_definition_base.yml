# Simple protocol definition trying to mimic https://zguide.zeromq.org/docs/chapter7/#Using-ABNF
#
#
protocol:
  class: protocol_base
  inherits: None
  description: Base protocol for all UberHF modules based on ZeroMQ
  socket: ZMQ_ROUTER, ZMQ_DEALER

states:
  - inactive        # Client/server just launched or shutdown due error
  - connecting      # Client initialized the connection
  - initializing    # Client performs initialization routing specific for a child protocol
  - active          # Client initialized and allowed sending regular commands of a child protocol


commands:
  connect:
    initiator: client
    description: client registers new connection
    required: state.inactive
    server_reply: server life id
    transition:
      on_success: state.connecting
      on_error: state.inactive

  initialize:
    initiator: client
    description: initialization of client/server connection
    required: state.connecting, state.initializing (allow multiple)
    server_reply: simple confirmation
    transition:
      on_success: state.initializing
      on_error: state.inactive


  activate:
    initiator: client
    description: finishing initialization of the client
    required: state.initializing
    server_reply: simple confirmation
    transition:
      on_success: state.active
      on_error: state.inactive

  heartbeat:
    initiator: client
    required: state.active
    description: periodic command for keeping alive
    server_reply: server life id or error
    transition:
      on_success: state.active
      on_error: state.inactive
    errors:
      - server/client life id mismatch
      - incorrect message length / format
      - socket timeout

command_handlers:
  on_connect:
    side: client / server
    description: handling incoming connections
    required: state.inactive
    client_request: client life id, client sender id
    server_reply: server life id
    transition:
      on_success: state.connecting
      on_error: state.inactive


  on_initialize:
    side: client / server
    description: handling incoming initialization
    required: state.connecting
    client_request: base message that notifies server that client is going 
                    to start initialization sequence

    server_reply: server confirms
    transition:
      on_success: state.initializing
      on_error: state.inactive
    protocol_calls:
      server: calls initialize_client() when gets this message
      client: calls initialize_client() when gets servers response (after this client 
              must send_activate or continue initialization)

  on_activate:
    side: client/server
    description: initialization is done, client ready to work
    required: state.initializing
    client_request: simple confirmation message
    server_reply: server confirms or reject total activation of the client
    transition:
      on_success: state.active
      on_error: state.inactive
    protocol_calls:
      server: calls activate_client() when gets this message
      client: calls activate_client() when gets servers response


  on_heartbeat:
    side: client/server
    description: check if connection is up, confirming if all is good
    required: state.active
    client_request: server life id, client life id
    server_reply: server life id, client life id - inactive if mismatch
    transition:
      on_success: state.active
      on_error: state.inactive
